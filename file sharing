import sleekxmpp

class MyClient(sleekxmpp.ClientXMPP):
    def __init__(self, jid, password):
        sleekxmpp.ClientXMPP.__init__(self, jid, password)
        self.add_event_handler("session_start", self.start)
        self.add_event_handler("message", self.message)
        self.add_event_handler("file_send_request", self.file_send_request)
        self.add_event_handler("file_send_complete", self.file_send_complete)
        self.add_event_handler("file_send_error", self.file_send_error)
        self.add_event_handler("file_recv_request", self.file_recv_request)
        self.add_event_handler("file_recv_complete", self.file_recv_complete)
        self.add_event_handler("file_recv_error", self.file_recv_error)

    def start(self, event):
        self.send_presence()
        self.get_roster()
        self.register_plugin('xep_0234')

    def message(self, msg):
        if msg['type'] in ('chat', 'normal'):
            if msg['body'].startswith('file:'):
                file_path = msg['body'].split(':')[1]
                try:
                    self['xep_0234'].send_file(file_path, msg['from'])
                except Exception as e:
                    print(f"Error sending file: {e}")
            else:
                msg.reply("Thanks for sending\n%(body)s" % msg).send()

    def file_send_request(self, iq):
        pass
    
    def file_send_complete(self, iq):
        pass
    
    def file_send_error(self, iq):
        pass
    
    def file_recv_request(self, iq):
        pass
    
    def file_recv_complete(self, iq):
        pass
    
    def file_recv_error(self, iq):
        pass

if __name__ == '__main__':
    xmpp = MyClient('your_jid', 'your_password')
    xmpp.register_plugin('xep_0030') # Service Discovery
    xmpp.register_plugin('xep_0199') # XMPP Ping
    xmpp.connect()
    xmpp.process(block=True)
